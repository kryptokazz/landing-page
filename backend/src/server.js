// backend/src/server.js
const cors = require('cors');
const express = require('express');
const fs = require('fs');
const path = require('path');
const app = express();
const PORT = process.env.PORT || 3000;

// Middleware to parse JSON and URL-encoded bodies
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// Use the cors middleware
app.use(cors()); 

app.use((req, res, next) => {
    res.setHeader(
        'Content-Security-Policy',
        "default-src 'none'; style-src 'self' 'unsafe-inline'; img-src 'self';"
    );
    next();
});

// Serve static files from the frontend/src directory
app.use(express.static(path.join(__dirname, '../../frontend')));

// Define the path for the JSON file
const DATA_FILE_PATH = path.join(__dirname, 'formData.json'); 

// Define the API endpoint to handle form submissions
app.post('/api/submit-form', (req, res) => {
    // ----------------------------------------------------
    // CRITICAL: GENERATE ID AND TIMESTAMP ON THE SERVER
    // ----------------------------------------------------
    const newInquiry = {
        id: Date.now(), // Unique ID generated by the server timestamp
        created_at: new Date().toISOString(), // Timestamp for sorting and display
        ...req.body // Spread the user-submitted data (name, email, message, etc.)
    };

    // 1. Read the existing data
    fs.readFile(DATA_FILE_PATH, { encoding: 'utf8' }, (err, data) => {
        let inquiries = [];

        if (err) {
            if (err.code === 'ENOENT') {
                console.log('Data file not found, creating new one.');
            } else {
                console.error('Error reading file:', err);
                return res.status(500).json({ message: 'Error processing data' });
            }
        } else {
            try {
                const parsedData = JSON.parse(data);

                // Ensure the data is an array for appending
                if (Array.isArray(parsedData)) {
                    inquiries = parsedData;
                } else if (typeof parsedData === 'object' && parsedData !== null) {
                    // Handle old, single-object format by converting it to an array
                    console.warn('POST: Converting single object data to array format.');
                    inquiries = [parsedData];
                } else {
                    console.error('POST: Data file contains unreadable content, starting fresh.');
                    inquiries = [];
                }
            } catch (parseError) {
                console.error('POST: Error parsing JSON, file corrupted:', parseError);
                inquiries = []; // Start fresh on corruption
            }
        }

        // 2. Add the new inquiry
        inquiries.push(newInquiry);

        // 3. Write the updated array back to the file
        fs.writeFile(DATA_FILE_PATH, JSON.stringify(inquiries, null, 2), (err) => {
            if (err) {
                console.error('Error writing to file', err);
                return res.status(500).json({
                    message: 'Error saving data'
                });
            }

            console.log('New inquiry saved:', newInquiry);
            res.status(200).json({
                message: 'Form submitted successfully!',
                data: newInquiry
            });
        });
    });
});

// API endpoint to retrieve all inquiries for the Admin Dashboard (GET request)
app.get('/api/inquiries', (req, res) => {
    fs.readFile(DATA_FILE_PATH, { encoding: 'utf8' }, (err, data) => {
        if (err) {
            if (err.code === 'ENOENT') {
                return res.status(200).json([]);
            }
            console.error('Error reading inquiry file:', err);
            return res.status(500).json({ message: 'Error retrieving data' });
        }

        try {
            const parsedData = JSON.parse(data);
            
            let inquiries = [];
            if (Array.isArray(parsedData)) {
                inquiries = parsedData;
            } else if (typeof parsedData === 'object' && parsedData !== null) {
                // If it's a single object, wrap it in an array for the client
                console.warn('GET: Converting single object data to array format for admin page.');
                inquiries = [parsedData];
            }
            
            res.status(200).json(inquiries);
        } catch (parseError) {
            console.error('GET: Error parsing JSON, returning empty array:', parseError);
            res.status(200).json([]);
        }
    });
});

// Start the server
app.listen(PORT, () => {
    console.log(`Server is running on http://localhost:${PORT}`);
});

